/**
 * Service de synchronisation en arri√®re-plan pour Track D√©chet
 * Int√©gr√© avec le service worker existant
 */

import { trackDechetProcessor } from './trackdechetSyncProcessor';

/**
 * D√©marre la synchronisation Track D√©chet en arri√®re-plan
 */
export const startTrackDechetBackgroundSync = () => {
  // Lancer la synchronisation Track D√©chet toutes les 30 secondes
  const interval = setInterval(async () => {
    try {
      await trackDechetProcessor.processTrackDechetQueue();
    } catch (error) {
      console.error('Erreur synchronisation Track D√©chet en arri√®re-plan:', error);
    }
  }, 30000); // 30 secondes

  console.log('üöÄ Synchronisation Track D√©chet en arri√®re-plan d√©marr√©e');

  // Nettoyer √† la fermeture
  if (typeof window !== 'undefined') {
    window.addEventListener('beforeunload', () => {
      clearInterval(interval);
    });
  }

  return interval;
};

/**
 * Synchronise imm√©diatement la file Track D√©chet
 */
export const syncTrackDechetNow = async (): Promise<void> => {
  try {
    console.log('‚ö° Synchronisation imm√©diate Track D√©chet d√©clench√©e');
    await trackDechetProcessor.processTrackDechetQueue();
  } catch (error) {
    console.error('Erreur synchronisation imm√©diate Track D√©chet:', error);
    throw error;
  }
};

/**
 * Synchronise les statuts des BSD existants
 */
export const syncBSDStatuses = async (): Promise<void> => {
  try {
    console.log('üìä Synchronisation des statuts BSD d√©clench√©e');
    await trackDechetProcessor.syncAllBSDStatuses();
  } catch (error) {
    console.error('Erreur synchronisation statuts BSD:', error);
    throw error;
  }
};

// Auto-d√©marrage si nous sommes dans le navigateur
if (typeof window !== 'undefined') {
  // D√©marrer apr√®s un d√©lai pour permettre l'initialisation
  setTimeout(startTrackDechetBackgroundSync, 5000);
}