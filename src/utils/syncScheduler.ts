import { db, UserSettings } from "@/lib/database";
import { backgroundSyncManager } from "./backgroundSync";

let syncInterval: NodeJS.Timeout | null = null;
let isInitialized = false;

export const setupAutoSync = async () => {
  // √âviter les r√©initialisations multiples
  if (isInitialized) {
    console.log("‚ö†Ô∏è Synchronisation d√©j√† initialis√©e, ignor√©");
    return;
  }

  // Nettoyer l'intervalle existant
  if (syncInterval) {
    clearInterval(syncInterval);
  }

  console.log("üîÑ Migration vers le nouveau syst√®me de Background Sync");

  // Le nouveau syst√®me utilise Periodic Background Sync natif
  // Fallback sur v√©rification horaire si Periodic Sync non support√©
  syncInterval = setInterval(async () => {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();

    // Synchronisation quotidienne √† 17h55 (fallback)
    if (hours === 17 && minutes === 55) {
      console.log(
        "üîÑ Fallback: D√©clenchement de la synchronisation quotidienne"
      );
      await backgroundSyncManager.performDailySync();
    }
  }, 60000); // V√©rifier chaque minute

  isInitialized = true;
  console.log("üìÖ Syst√®me de synchronisation robuste initialis√©");
};

export const stopAutoSync = () => {
  if (syncInterval) {
    clearInterval(syncInterval);
    syncInterval = null;
    // Ne pas r√©initialiser isInitialized pour √©viter les boucles
    console.log("‚èπÔ∏è Planificateur de synchronisation automatique arr√™t√©");
  }
};

const performAutoSync = async () => {
  try {
    // V√©rifier si l'API Sage est configur√©e
    const userSettings = await db.userSettings.toCollection().first();

    if (!userSettings?.cleAPISage) {
      console.log(
        "‚ö†Ô∏è Synchronisation automatique annul√©e: API Sage non configur√©e"
      );
      return;
    }

    // V√©rifier la connexion
    if (!navigator.onLine) {
      console.log("‚ö†Ô∏è Synchronisation automatique annul√©e: mode hors ligne");
      return;
    }

    // R√©cup√©rer les pes√©es non synchronis√©es (utiliser 1 au lieu de true pour IndexedDB)
    const pendingPesees = await db.pesees
      .where("synchronized")
      .notEqual(1)
      .toArray();

    if (pendingPesees.length === 0) {
      console.log("‚úÖ Synchronisation automatique: aucune donn√©e en attente");
      return;
    }

    console.log(
      `üîÑ D√©but de la synchronisation automatique: ${pendingPesees.length} pes√©e(s)`
    );

    // Simulation de l'envoi vers Sage (√† remplacer par la vraie API)
    try {
      // Ici, vous int√©grerez l'appel r√©el √† l'API Sage
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Marquer les pes√©es comme synchronis√©es
      for (const pesee of pendingPesees) {
        await db.pesees.update(pesee.id!, { synchronized: true });
      }

      console.log(
        `‚úÖ Synchronisation automatique r√©ussie: ${pendingPesees.length} pes√©e(s) envoy√©e(s)`
      );

      // Optionnel: Envoyer une notification
      if ("Notification" in window && Notification.permission === "granted") {
        new Notification("Synchronisation automatique", {
          body: `${pendingPesees.length} pes√©e(s) synchronis√©e(s) avec Sage`,
          icon: "/favicon.ico",
        });
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la synchronisation automatique:", error);
    }
  } catch (error) {
    console.error(
      "‚ùå Erreur dans le processus de synchronisation automatique:",
      error
    );
  }
};

// Le d√©marrage automatique est maintenant g√©r√© par App.tsx
// pour √©viter les conflits et les boucles infinies
