/**
 * Utilitaire pour tester la persistance d'OPFS
 * Permet de v√©rifier si les donn√©es persistent apr√®s refresh et vidage du cache
 */

import { opfsBackup } from "@/services/OPFSBackupService";

/**
 * √âcrit un fichier de test dans OPFS avec un timestamp
 */
export async function writeTestFile(): Promise<string> {
  try {
    // V√©rifier si OPFS est disponible
    if (!opfsBackup.isSupported()) {
      return "‚ùå OPFS non support√© sur ce navigateur";
    }

    // Cr√©er des donn√©es de test avec timestamp
    const timestamp = Date.now();
    const testData = {
      testId: `test-${timestamp}`,
      timestamp,
      date: new Date().toISOString(),
      message: "Ceci est un test de persistance OPFS",
    };

    // √âcrire les donn√©es dans un fichier OPFS
    await opfsBackup.saveToFile();

    // Stocker l'ID du test dans localStorage pour v√©rification ult√©rieure
    localStorage.setItem("opfs-test-id", testData.testId);
    localStorage.setItem("opfs-test-timestamp", timestamp.toString());

    return `‚úÖ Fichier de test √©crit avec succ√®s (ID: ${testData.testId})`;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'√©criture du fichier de test:", error);
    return `‚ùå Erreur: ${(error as Error).message}`;
  }
}

/**
 * V√©rifie si le fichier de test existe toujours dans OPFS
 */
export async function checkTestFile(): Promise<string> {
  try {
    // V√©rifier si OPFS est disponible
    if (!opfsBackup.isSupported()) {
      return "‚ùå OPFS non support√© sur ce navigateur";
    }

    // R√©cup√©rer l'ID du test pr√©c√©dent
    const testId = localStorage.getItem("opfs-test-id");
    const testTimestamp = localStorage.getItem("opfs-test-timestamp");

    if (!testId || !testTimestamp) {
      return "‚ö†Ô∏è Aucun test pr√©c√©dent trouv√©. Ex√©cutez d'abord writeTestFile()";
    }

    // V√©rifier si le fichier existe
    const hasFile = await opfsBackup.hasBackupFile();

    if (!hasFile) {
      return "‚ùå Fichier de test non trouv√© - La persistance a √©chou√©";
    }

    // Charger les donn√©es pour v√©rifier
    const backupData = await opfsBackup.loadFromFile();

    if (!backupData) {
      return "‚ùå Impossible de charger les donn√©es - La persistance a √©chou√©";
    }

    // Calculer le temps √©coul√© depuis le test
    const elapsed = Date.now() - parseInt(testTimestamp);
    const elapsedStr =
      elapsed < 60000
        ? `${Math.round(elapsed / 1000)} secondes`
        : `${Math.round(elapsed / 60000)} minutes`;

    return `‚úÖ Test de persistance r√©ussi! Les donn√©es ont surv√©cu apr√®s ${elapsedStr}`;
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la v√©rification du fichier de test:",
      error
    );
    return `‚ùå Erreur: ${(error as Error).message}`;
  }
}

/**
 * Ex√©cute un test complet de persistance
 * √Ä utiliser dans la console du navigateur
 */
export async function runPersistenceTest(): Promise<string> {
  try {
    const result1 = await writeTestFile();
    console.log(result1);

    console.log(
      "üîÑ Maintenant, rafra√Æchissez la page et ex√©cutez checkTestFile()"
    );

    return "‚úÖ Test initialis√©. Rafra√Æchissez la page et ex√©cutez checkTestFile()";
  } catch (error) {
    console.error("‚ùå Erreur lors du test de persistance:", error);
    return `‚ùå Erreur: ${(error as Error).message}`;
  }
}

/**
 * Instructions pour tester la persistance apr√®s vidage du cache
 */
export function getCacheTestInstructions(): string {
  return `
Pour tester la persistance apr√®s vidage du cache:

1. Ex√©cutez runPersistenceTest() et notez l'ID du test
2. Ouvrez les DevTools (F12)
3. Allez dans l'onglet "Application"
4. Dans la section "Storage", cliquez sur "Clear site data"
5. Rafra√Æchissez la page
6. Ex√©cutez checkTestFile()

Si le test r√©ussit, cela confirme que OPFS survit au vidage du cache!
`;
}
