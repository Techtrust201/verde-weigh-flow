/**
 * Script de test pour v√©rifier la persistance des donn√©es
 * √Ä ex√©cuter dans la console du navigateur
 */

import { db } from "@/lib/database";
import { fileBackup } from "@/services/fileBackup";

// Fonction pour tester la sauvegarde
async function testBackupPersistence() {
  console.log("üß™ Test de persistance des donn√©es...");

  try {
    // 1. V√©rifier l'√©tat actuel
    console.log("üìä √âtat actuel des donn√©es:");

    const clients = await db.clients.count();
    const products = await db.products.count();
    const pesees = await db.pesees.count();
    const transporteurs = await db.transporteurs.count();

    console.log(`- Clients: ${clients}`);
    console.log(`- Produits: ${products}`);
    console.log(`- Pes√©es: ${pesees}`);
    console.log(`- Transporteurs: ${transporteurs}`);

    // 2. Ajouter une pes√©e de test
    console.log("‚ûï Ajout d'une pes√©e de test...");
    const testPesee = {
      numeroBon: `TEST-${Date.now()}`,
      dateHeure: new Date(),
      plaque: "TEST-123",
      nomEntreprise: "Test Entreprise",
      chantier: "Test Chantier",
      produitId: 1,
      poidsEntree: 10.5,
      poidsSortie: 8.2,
      net: 2.3,
      prixHT: 50.0,
      prixTTC: 60.0,
      moyenPaiement: "Direct",
      clientId: 1,
      transporteurId: 1,
      typeClient: "professionnel" as const,
      synchronized: false,
      version: 1,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await db.pesees.add(testPesee);
    console.log("‚úÖ Pes√©e de test ajout√©e");

    // 3. Forcer une sauvegarde
    console.log("üíæ Sauvegarde forc√©e...");

    if (fileBackup.forceSaveNow) {
      await fileBackup.forceSaveNow();
      console.log("‚úÖ Sauvegarde forc√©e r√©ussie");
    } else {
      await fileBackup.saveToFile();
      console.log("‚úÖ Sauvegarde normale r√©ussie");
    }

    // 4. V√©rifier le timestamp
    const lastBackupTime = localStorage.getItem("lastBackupTime");
    if (lastBackupTime) {
      const backupDate = new Date(parseInt(lastBackupTime));
      console.log(`üïê Derni√®re sauvegarde: ${backupDate.toLocaleString()}`);
    }

    // 5. V√©rifier IndexedDB
    console.log("üóÑÔ∏è V√©rification IndexedDB...");
    const request = indexedDB.open("FileBackupDB", 3);
    request.onsuccess = () => {
      const db = request.result;
      const transaction = db.transaction(["backups"], "readonly");
      const store = transaction.objectStore("backups");
      const getRequest = store.get("fullBackup");

      getRequest.onsuccess = () => {
        if (getRequest.result) {
          console.log("‚úÖ Sauvegarde trouv√©e dans IndexedDB");
          const data = JSON.parse(getRequest.result.data);
          console.log(`üìä Donn√©es sauvegard√©es: ${data.pesees.length} pes√©es`);
        } else {
          console.log("‚ùå Aucune sauvegarde trouv√©e dans IndexedDB");
        }
        db.close();
      };
    };

    console.log(
      "üéâ Test termin√©! Rafra√Æchissez la page et v√©rifiez que les donn√©es persistent."
    );
  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
  }
}

// Fonction pour v√©rifier la persistance apr√®s refresh
async function checkPersistenceAfterRefresh() {
  console.log("üîÑ V√©rification de la persistance apr√®s refresh...");

  try {
    const clients = await db.clients.count();
    const products = await db.products.count();
    const pesees = await db.pesees.count();
    const transporteurs = await db.transporteurs.count();

    console.log("üìä Donn√©es apr√®s refresh:");
    console.log(`- Clients: ${clients}`);
    console.log(`- Produits: ${products}`);
    console.log(`- Pes√©es: ${pesees}`);
    console.log(`- Transporteurs: ${transporteurs}`);

    // V√©rifier s'il y a des pes√©es de test
    const testPesees = await db.pesees
      .where("numeroBon")
      .startsWith("TEST-")
      .toArray();
    console.log(`üß™ Pes√©es de test trouv√©es: ${testPesees.length}`);

    if (testPesees.length > 0) {
      console.log("‚úÖ La persistance fonctionne correctement!");
    } else {
      console.log("‚ö†Ô∏è Aucune pes√©e de test trouv√©e - v√©rifiez la sauvegarde");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
  }
}

// Fonction pour nettoyer les donn√©es de test
async function cleanupTestData() {
  console.log("üßπ Nettoyage des donn√©es de test...");

  try {
    // Supprimer les pes√©es de test
    const testPesees = await db.pesees
      .where("numeroBon")
      .startsWith("TEST-")
      .toArray();
    for (const pesee of testPesees) {
      await db.pesees.delete(pesee.id!);
    }

    console.log(`‚úÖ ${testPesees.length} pes√©es de test supprim√©es`);
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage:", error);
  }
}

// Exporter les fonctions pour utilisation dans la console
(window as any).testBackupPersistence = testBackupPersistence;
(window as any).checkPersistenceAfterRefresh = checkPersistenceAfterRefresh;
(window as any).cleanupTestData = cleanupTestData;

console.log(`
üß™ Scripts de test disponibles:
- testBackupPersistence() : Teste la sauvegarde des donn√©es
- checkPersistenceAfterRefresh() : V√©rifie la persistance apr√®s refresh
- cleanupTestData() : Nettoie les donn√©es de test

Exemple d'utilisation:
1. testBackupPersistence()
2. Rafra√Æchir la page
3. checkPersistenceAfterRefresh()
4. cleanupTestData()
`);
