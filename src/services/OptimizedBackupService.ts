/**
 * Service de sauvegarde optimis√© pour gros volumes
 * Impl√©mente des strat√©gies d'optimisation pour la sauvegarde
 */

import { BackupData } from "./fileBackup";
import { db } from "@/lib/database";

interface ChangeQueueItem {
  timestamp: number;
  operation: "INSERT" | "UPDATE" | "DELETE";
  table: string;
  data: any;
}

export class OptimizedBackupService {
  private static instance: OptimizedBackupService;
  private changeQueue: ChangeQueueItem[] = [];
  private isSaving: boolean = false;
  private saveTimeout: NodeJS.Timeout | null = null;
  private readonly SAVE_DELAY = 1000; // 1 seconde de d√©lai

  /**
   * Obtient l'instance unique du service (Singleton)
   */
  public static getInstance(): OptimizedBackupService {
    if (!OptimizedBackupService.instance) {
      OptimizedBackupService.instance = new OptimizedBackupService();
    }
    return OptimizedBackupService.instance;
  }

  /**
   * Sauvegarde imm√©diate dans IndexedDB (ultra-rapide)
   * @param data Donn√©es √† sauvegarder
   * @param table Table concern√©e
   * @param operation Type d'op√©ration
   */
  async saveImmediate(
    data: any,
    table: string,
    operation: "INSERT" | "UPDATE" | "DELETE" = "UPDATE"
  ): Promise<void> {
    try {
      // 1. Sauvegarder dans IndexedDB (1ms)
      await this.saveToIndexedDB(data, table, operation);

      // 2. Ajouter √† la queue de sauvegarde fichier
      this.addToChangeQueue({
        timestamp: Date.now(),
        operation,
        table,
        data,
      });

      // 3. D√©clencher la sauvegarde fichier (asynchrone)
      this.triggerFileSave();
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la sauvegarde imm√©diate (${table}):`,
        error
      );
      throw error;
    }
  }

  /**
   * Ajoute un √©l√©ment √† la queue de changements
   * @param item √âl√©ment √† ajouter
   */
  private addToChangeQueue(item: ChangeQueueItem): void {
    this.changeQueue.push(item);
    console.log(`‚ûï Ajout √† la queue de changements (${item.table})`);
  }

  /**
   * D√©clenche la sauvegarde fichier en arri√®re-plan
   */
  private triggerFileSave(): void {
    if (this.isSaving || this.saveTimeout) return;

    // Attendre 1 seconde pour regrouper les modifications
    this.saveTimeout = setTimeout(async () => {
      this.isSaving = true;
      this.saveTimeout = null;

      try {
        if (this.changeQueue.length > 0) {
          await this.saveChangesToFile();
          this.changeQueue = []; // Vider la queue
        }
      } catch (error) {
        console.error("‚ùå Erreur lors de la sauvegarde fichier:", error);
      } finally {
        this.isSaving = false;
      }
    }, this.SAVE_DELAY);
  }

  /**
   * Sauvegarde les changements dans le fichier
   */
  private async saveChangesToFile(): Promise<void> {
    if (this.changeQueue.length === 0) return;

    console.log(`üíæ Sauvegarde de ${this.changeQueue.length} changements...`);

    // Si peu de changements, sauvegarde incr√©mentale
    if (this.changeQueue.length < 10) {
      await this.saveIncremental(this.changeQueue);
    } else {
      // Si beaucoup de changements, sauvegarde compl√®te
      await this.saveComplete();
    }
  }

  /**
   * Sauvegarde incr√©mentale (pour petits volumes)
   * @param changes Changements √† sauvegarder
   */
  private async saveIncremental(changes: ChangeQueueItem[]): Promise<void> {
    try {
      console.log(`üîÑ Sauvegarde incr√©mentale (${changes.length} changements)`);

      // TODO: Impl√©menter la sauvegarde incr√©mentale
      // Pour l'instant, on utilise la sauvegarde compl√®te
      await this.saveComplete();
    } catch (error) {
      console.error("‚ùå Erreur lors de la sauvegarde incr√©mentale:", error);
      throw error;
    }
  }

  /**
   * Sauvegarde compl√®te (pour gros volumes)
   */
  private async saveComplete(): Promise<void> {
    try {
      console.log("üìä Sauvegarde compl√®te...");

      // TODO: Impl√©menter la sauvegarde compl√®te
      // Pour l'instant, on utilise la sauvegarde par d√©faut
    } catch (error) {
      console.error("‚ùå Erreur lors de la sauvegarde compl√®te:", error);
      throw error;
    }
  }

  /**
   * Sauvegarde par chunks (pour tr√®s gros volumes)
   * @param data Donn√©es √† sauvegarder
   */
  async saveByChunks(data: any[]): Promise<void> {
    try {
      console.log(`üì¶ Sauvegarde par chunks (${data.length} √©l√©ments)`);

      const chunkSize = 1000; // 1000 √©l√©ments par chunk

      for (let i = 0; i < data.length; i += chunkSize) {
        const chunk = data.slice(i, i + chunkSize);
        await this.saveChunk(
          chunk,
          i / chunkSize + 1,
          Math.ceil(data.length / chunkSize)
        );

        // Pause pour √©viter de bloquer l'interface
        await new Promise((resolve) => setTimeout(resolve, 10));
      }

      console.log("‚úÖ Sauvegarde par chunks termin√©e");
    } catch (error) {
      console.error("‚ùå Erreur lors de la sauvegarde par chunks:", error);
      throw error;
    }
  }

  /**
   * Sauvegarde un chunk de donn√©es
   * @param chunk Chunk √† sauvegarder
   * @param chunkNumber Num√©ro du chunk
   * @param totalChunks Nombre total de chunks
   */
  private async saveChunk(
    chunk: any[],
    chunkNumber: number,
    totalChunks: number
  ): Promise<void> {
    try {
      console.log(
        `üì¶ Sauvegarde du chunk ${chunkNumber}/${totalChunks} (${chunk.length} √©l√©ments)`
      );

      // TODO: Impl√©menter la sauvegarde d'un chunk
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la sauvegarde du chunk ${chunkNumber}:`,
        error
      );
      throw error;
    }
  }

  /**
   * Sauvegarde dans IndexedDB
   * @param data Donn√©es √† sauvegarder
   * @param table Table concern√©e
   * @param operation Type d'op√©ration
   */
  private async saveToIndexedDB(
    data: any,
    table: string,
    operation: "INSERT" | "UPDATE" | "DELETE"
  ): Promise<void> {
    try {
      switch (operation) {
        case "INSERT":
          if (Array.isArray(data)) {
            await (db as any)[table].bulkAdd(data);
          } else {
            await (db as any)[table].add(data);
          }
          break;

        case "UPDATE":
          if (Array.isArray(data)) {
            await (db as any)[table].bulkPut(data);
          } else {
            await (db as any)[table].put(data);
          }
          break;

        case "DELETE":
          if (Array.isArray(data)) {
            await (db as any)[table].bulkDelete(
              data.map((item: any) => item.id)
            );
          } else {
            await (db as any)[table].delete(data.id);
          }
          break;
      }
    } catch (error) {
      console.error(
        `‚ùå Erreur lors de la sauvegarde IndexedDB (${table}):`,
        error
      );
      throw error;
    }
  }

  /**
   * Pr√©pare les donn√©es de sauvegarde compl√®tes
   */
  async prepareBackupData(): Promise<BackupData> {
    console.log("üíæ Pr√©paration des donn√©es de sauvegarde...");

    // R√©cup√©rer TOUTES les donn√©es de la base
    const [
      userSettings,
      clients,
      products,
      pesees,
      transporteurs,
      sageTemplates,
    ] = await Promise.all([
      db.userSettings.toArray(),
      db.clients.toArray(),
      db.products.toArray(),
      db.pesees.toArray(),
      db.transporteurs.toArray(),
      db.sageTemplates.toArray(),
    ]);

    // Trouver la derni√®re pes√©e pour les m√©tadonn√©es
    const lastPesee =
      pesees.length > 0
        ? pesees.reduce((latest, current) =>
            new Date(current.createdAt) > new Date(latest.createdAt)
              ? current
              : latest
          )
        : null;

    const backupData: BackupData = {
      version: "2.0", // Version mise √† jour pour sauvegarde compl√®te
      timestamp: new Date().toISOString(),
      userSettings,
      clients,
      products,
      pesees,
      transporteurs,
      sageTemplates,
      metadata: {
        totalClients: clients.length,
        totalProducts: products.length,
        totalPesees: pesees.length,
        totalTransporteurs: transporteurs.length,
        totalTemplates: sageTemplates.length,
        lastPeseeDate: lastPesee?.createdAt.toISOString(),
        backupSize: "Calcul√© apr√®s cr√©ation",
      },
    };

    // Calculer la taille du backup
    const jsonString = JSON.stringify(backupData, null, 2);
    const sizeInBytes = new Blob([jsonString]).size;
    backupData.metadata.backupSize = this.formatFileSize(sizeInBytes);

    console.log(`üìä Donn√©es pr√©par√©es :
      - Clients: ${backupData.metadata.totalClients}
      - Produits: ${backupData.metadata.totalProducts}
      - Pes√©es: ${backupData.metadata.totalPesees}
      - Transporteurs: ${backupData.metadata.totalTransporteurs}
      - Templates: ${backupData.metadata.totalTemplates}
      - Taille: ${backupData.metadata.backupSize}`);

    return backupData;
  }

  /**
   * Formate la taille du fichier en unit√©s lisibles
   * @param bytes Taille en octets
   * @returns Taille format√©e
   */
  private formatFileSize(bytes: number): string {
    if (bytes < 1024) return bytes + " bytes";
    else if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + " KB";
    else if (bytes < 1024 * 1024 * 1024)
      return (bytes / (1024 * 1024)).toFixed(2) + " MB";
    else return (bytes / (1024 * 1024 * 1024)).toFixed(2) + " GB";
  }
}

// Instance globale
let optimizedBackupInstance: OptimizedBackupService | null = null;

export const optimizedBackup = {
  getInstance: () => {
    if (!optimizedBackupInstance) {
      optimizedBackupInstance = new OptimizedBackupService();
    }
    return optimizedBackupInstance;
  },
  saveImmediate: (
    data: any,
    table: string,
    operation: "INSERT" | "UPDATE" | "DELETE" = "UPDATE"
  ) => {
    return optimizedBackup.getInstance().saveImmediate(data, table, operation);
  },
  saveByChunks: (data: any[]) => {
    return optimizedBackup.getInstance().saveByChunks(data);
  },
  prepareBackupData: () => {
    return optimizedBackup.getInstance().prepareBackupData();
  },
};



